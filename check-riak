#!/usr/bin/env bash
#
# Riak health check
#
# Authors:
# Dave Eddy <dave@daveeddy.com>
# Claudio Kuenzler <claudiokuenzler.com> (ignorelib)
# License: MIT

# colors
_bold=$(tput bold 2>/dev/null)
_yellow=$(tput setaf 3 2>/dev/null)
_reset=$(tput sgr0 2>/dev/null)

# erlang shell
erl=/opt/local/lib/riak/erts*/bin/erl

# Add commas to a given input
_commas() {
	sed -e :a -e 's/\(.*[0-9]\)\([0-9]\{3\}\)/\1,\2/;ta'
}

# Get the mtime in epoch seconds of a file
_mtime() {
	stat -c %Y "$1" 2>/dev/null ||
		stat -f %m "$1"
}

# show seconds in human readable form
_human() {
	local seconds=$1
	if ((seconds < 0)); then
		((seconds *= -1))
	fi

	local times=(
		$((seconds / 60 / 60 / 24 / 365)) # years
		$((seconds / 60 / 60 / 24 / 30))  # months
		$((seconds / 60 / 60 / 24))       # days
		$((seconds / 60 / 60))            # hours
		$((seconds / 60))                 # minutes
		$((seconds))                      # seconds
	)
	local names=(year month day hour minute second)

	local i j
	for ((i = 0; i < ${#names[@]}; i++)); do
		if ((${times[$i]} > 1)); then
			echo "${times[$i]} ${names[$i]}s"
			return
		elif ((${times[$i]} == 1)); then
			echo "${times[$i]} ${names[$i]}"
			return
		fi
	done
	echo '0 seconds'
}

# print usage
usage() {
	cat <<-EOF
	usage: ${0##*/} [ options ] [ check ]

	run this script with no options to get an overview of riak health
	on a system.

	give an optional parameter to only check one portion of the system.

	examples
	  check-riak                # full system health overview
	  check-riak compaction     # only check for compaction errors
	  check-riak -n compaction  # check for compaction, output suitable for nagios

	options
	  -a              run all checks
	  -c <config>     the riak config file to use, defaults to $riak_config
	  -d <dir>        the database directory, defaults to $db_dir
	  -h              print this message and exit
	  -H <host>       the riak host, defaults to $riak_host
	  -n              less pretty output suitable for a nagios check
	  -p <port>       the riak port, defaults to $riak_port
	  -s <svc>        the service fmri to use for SMF, defaults to $svc_name
	  -t <seconds>    the timeout, in seconds, when curl'ing riak, defaults to $stats_timeout
	  -W <bytes>      the warning threshold for rss in bytes, defaults to $rss_warning
	  -C <bytes>      the critical threshold for rss in bytes, defaults to $rss_critical

	optional arguments
	  compaction      check for compaction errors
	  config          show the first line of the riak config
	  ping            check riak ping using /ping
	  process         parse ps for the running process
	  profile         profile beam.smp with DTrace
	  riakping        check riak ping locally
	  rss             check riak rss
	  service         show svcs output for riak
	  singleton       see if this machine is a single cluster
	  stats           check riak stats (riak_kv_vnodes_running)
	  system          check riak system health

	EOF
}

# Print a header
header() {
	$nagios || printf '\n%s%40s%s\n' "$_yellow" "$1" "$_reset"
}

# Print riak purpose
show_config() {
	header 'Riak Cluster'
	printf '%s (%s)\n' "$(head -1 "$riak_config")" "$riak_version"
}

# Check the svcs output
show_service() {
	header 'Checking Service'
	svcs "$svc_name"
}

# Check the process
show_process() {
	header 'Checking Process'
	if ps aux | grep riak | grep beam; then
		ret=0
	else
		echo 'not running'
		ret=2
	fi
	return "$ret"
}

# Check compaction errors
show_compaction() {
	header 'Checking Compaction Errors'

	if ! cd "$db_dir"; then
		echo "unknown: failed to cd to '$db_dir'"
		return 3
	fi

	local a=$(find . -name 'LOG' -exec grep -l 'Compaction error' {} \;)

	if [[ -z $a ]]; then
		echo 'ok: no compaction errors found'
		ret=0
	else
		# compaction errors found
		if $nagios; then
			echo "critical: $(wc -l <<< "$a") compaction error(s) found"
		else
			# interactive
			cat <<-EOF
			-------- Compaction errors found! --------
			** $_bold Stop riak before doing anything! $_reset**
			follow the instructions below to fix the compaction errors

			# Start the erl shell
			[sudo] $erl

			# Copy this in
			[application:set_env(eleveldb, Var, Val) || {Var, Val} <-
			[{max_open_files, 2000},
			{block_size, 1048576},
			{cache_size, 20*1024*1024*1024},
			{sync, false},
			{data_root, "$db_dir"}]].

			# Drop the following command(s) in one-by-one
			EOF
			while read line; do
				tmp=${line/.\//}; dbname=${tmp%%\/*};
				printf 'eleveldb:repair("%s/%s", []).\n' "$db_dir" "$dbname"
			done <<< "$a"
		fi
		ret=2
	fi
	return "$ret"
}

# Check ping
show_local_ping() {
	header 'Checking Riak Ping'
	riak ping && return 0 || return 2
}

# Ping port
show_remote_ping() {
	header 'Checking Riak Stats Ping'
	out=$(curl -sSm "$stats_timeout" "http://$riak_host:$riak_port/ping")
	[[ -n $out ]] && echo "$out"
	if [[ $out == "OK" ]]; then
		ret=0
	else
		echo 'critical: ping failed'
		ret=2
	fi
	return "$ret"
}

# check rss
show_rss() {
	header 'Checking rss'
	# Get riak rss
	if [[ -n $riak_pid ]]; then
		# local rss is in KB
		local rss=$(ps -o rss= -p "$riak_pid" | tail -1)
		local ret=
		if [[ -z $rss ]]; then
			echo "unknown: error getting rss for pid $riak_pid"
			return 3
		fi
		rssb=$((rss * 1024)) # turn it into Bytes
		if ((rss > rss_critical)); then
			echo -n 'critical: '
			ret=2
		elif ((rss > rss_warning)); then
			echo -n 'warning: '
			ret=1
		else
			echo -n 'ok: '
			ret=0
		fi

		local pretty_rss=$(echo "$rss" | _commas)K
		echo -n "$pretty_rss rss"
		$nagios && echo -n "|rss=$rssb"
		echo
		return "$ret"
	fi

	echo 'unknown: failed to get system rss'
	return 3
}

# Check stats
show_stats() {
	header 'Checking /stats (riak_kv_vnodes_running)'
	local out=$(curl -sSm "$stats_timeout" "http://$riak_host:$riak_port/stats" | json riak_kv_vnodes_running)
	if (($? != 0)) || [[ -z $out ]]; then
		echo "critical: failed (timeout: $stats_timeout seconds)"
		ret=2
	else
		echo "ok: stats responded with $out"
		ret=0
	fi
	return "$ret"
}

# Dtrace riak
show_profile() {
	header 'Profiling Riak'
	dtrace -qn '
	profile-997
	/pid == $target && arg1/
	{
		@[uaddr(arg1)] = count();
	}
	tick-5s
	{
		trunc(@, 10);
		exit(0);
	}' -p "$riak_pid"
}

# Check singelton
show_singleton() {
	header 'Checking Singleton'
	local stats_json=$(curl -sSm "$stats_timeout" "http://$riak_host:$riak_port/stats")

	if [[ -z "$stats_json" ]]; then
		echo 'unknown: failed to curl /stats'
		return 3
	fi

	local ring_members
	ring_members=$(json ring_members <<< "$stats_json")
	if (($? != 0)) || [[ -z $ring_members ]]; then
		echo 'unknown: failed to parse JSON response'
		return 3
	fi

	ring_members=$(json -a <<< "$ring_members")
	if (($? != 0)) || [[ -z $ring_members ]]; then
		echo 'unknown: failed to parse JSON response'
		return 3
	fi
	ring_members=$(wc -l <<< "$ring_members")

	if [[ -z $ring_members ]]; then
		echo 'unknown: failed to find ring_members in /stats'
		return 3
	fi

	if ((ring_members == 1)); then
		echo "critical: $ring_members ring member found"
		return 2
	else
		echo "ok: $ring_members ring members found"
		return 0
	fi
}

# show rss
show_system() {
	header 'System Health'
	# Get riak rss
	if [[ -n $riak_pid ]]; then
		# rss is in KB
		local rss=$(ps -o rss= -p "$riak_pid" | tail -1)
		local rssb=$((rss * 1024))
		local rssk=$(echo "$rss" | _commas)K
		local fds=$(ls -U1 "/proc/$riak_pid/fd" 2>/dev/null | wc -l | tr -d ' ' | _commas)
		[[ -z $fds || $fds == 0 ]] && fds=$(( $(fstat -p "$riak_pid" | wc -l | tr -d ' ') - 1))
		echo -n "pid $riak_pid: $rssk rss ($fds open files)"
		$nagios && echo -n "|rss=$rssb"
		echo
	else
		echo 'failed to get system health - no pid found'
	fi
}

# check when riak last restarted
show_last_restarted() {
	header 'Riak Last Restarted'
	local now=$(date +%s)
	local started=$(_mtime "/proc/$riak_pid" 2>/dev/null)
	[[ -z $started ]] && started=$(_mtime "/compat/linux/proc/$riak_pid")
	local delta=$((now - started))
	$nagios && echo -n "[$started] "
	echo "riak started $(_human "$delta") ago"
}

# Call all checks
main() {
	show_config
	svcs &>/dev/null && show_service
	show_process
	if [[ -n $riak_pid ]]; then
		show_system
		show_local_ping
		show_remote_ping
		show_singleton
		show_stats
		show_last_restarted
		$all && dtrace -V &>/dev/null && show_profile
		$all && show_rss
	fi
	show_compaction
}

all=false
db_dir='/var/db/riak/leveldb'
nagios=false
riak_config='/etc/riak/app.config'
rss_warning=50000000000
rss_critical=60000000000
riak_port=8098
riak_host='localhost'
stats_timeout=10 # seconds
svc_name='riak'
while getopts 'ac:d:hH:np:s:t:W:C:' options; do
	case "$options" in
		a) all=true;;
		c) riak_config=$OPTARG;;
		d) db_dir=$OPTARG;;
		H) riak_host=$OPTARG;;
		n) nagios=true;;
		p) riak_port=$OPTARG;;
		s) svc_name=$OPTARG;;
		t) stats_timeout=$OPTARG;;
		W) rss_warning=$OPTARG;;
		C) rss_critical=$OPTARG;;
		h) usage >&2; exit 0;;
		*) usage >&2; exit 1;;
	esac
done
shift $((OPTIND - 1))

# riak getpid is slow and inconsistent, so instead we do this awfully
riak_pid=$(pgrep -f '/riak/.*/beam.smp')
riak_version=$(riak version 2>&1)

case "$1" in
	compaction) show_compaction;;
	config) show_config;;
	ping) show_remote_ping;;
	process) show_process;;
	profile) show_profile;;
	restarted) show_last_restarted;;
	riakping) show_local_ping;;
	rss) show_rss;;
	service) show_service;;
	singleton) show_singleton;;
	stats) show_stats;;
	system) show_system;;
	*) main;;
esac
ret=$?
$nagios || echo
exit "$ret"
